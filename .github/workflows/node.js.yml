name: CI Pipeline

on:
  push: # Trigger on all pushes to any branch
    branches: 
      - '**' # Match all branches
  pull_request: # Trigger on all pull requests to any branch
    branches: 
      - '**' # Match all branches


jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      # Checkout repository
      - uses: actions/checkout@v2

      # Set up Node.js
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Install dependencies
      - run: npm ci

      # Run Jest tests
      - name: Run Jest tests
        run: npx jest --json --outputFile=jest-results.json || true

      # Format Jest results and add to Job Summary
      - name: Generate Jest Report
        run: |
          echo "### Jest Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Passed | Failed | Skipped | Time (s) |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|--------|---------|---------|" >> $GITHUB_STEP_SUMMARY
          cat jest-results.json | jq -r '
            .testResults[] | 
            select(.name != null) | 
            "| \(.name | capture("(?<file>[^/]+$)").file) | \(
              (.assertionResults | map(select(.status=="passed")) | length) // 0
            ) | \(
              (.assertionResults | map(select(.status=="failed")) | length) // 0
            ) | \(
              (.assertionResults | map(select(.status=="pending")) | length) // 0
            ) | \(
              ((.assertionResults | map(.duration // 0) | add) / 1000) 
            ) |"' >> $GITHUB_STEP_SUMMARY

